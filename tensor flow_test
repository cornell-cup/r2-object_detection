import numpy as np
import os
import sys
import tensorflow as tf
import cv2
import math
from utils import label_map_util
import matplotlib
matplotlib.use('TkAgg')
matplotlib.rcParams["backend"] = "TkAgg"
import matplotlib.pyplot as plt
print(matplotlib.get_backend())
plt.switch_backend("TkAgg")
from PIL import Image
import time



MODEL_NAME = 'ssd_mobilenet_v1_coco_2018_01_28'
PATH_TO_FROZEN_GRAPH = MODEL_NAME + '/frozen_inference_graph.pb'
PATH_TO_LABELS = os.path.join('data', 'mscoco_label_map.pbtxt')
category_index = label_map_util.create_category_index_from_labelmap(PATH_TO_LABELS, use_display_name=True)
detection_graph = tf.Graph()

with detection_graph.as_default():
    od_graph_def = tf.GraphDef()
    with tf.gfile.GFile(PATH_TO_FROZEN_GRAPH, 'rb') as fid:
        serialized_graph = fid.read()
        od_graph_def.ParseFromString(serialized_graph)
        tf.import_graph_def(od_graph_def, name='')
        session = tf.Session()
        
def run_inference_for_single_image(image):
      # Get handles to input and output tensors
      ops = detection_graph.get_operations()
      all_tensor_names = {output.name for op in ops for output in op.outputs}
      tensor_dict = {}
      for key in [
          'num_detections', 'detection_boxes', 'detection_scores',
          'detection_classes', 'detection_masks'
      ]:
        tensor_name = key + ':0'
        if tensor_name in all_tensor_names:
          tensor_dict[key] = detection_graph.get_tensor_by_name(
              tensor_name)
      if 'detection_masks' in tensor_dict:
        # The following processing is only for single image
        detection_boxes = tf.squeeze(tensor_dict['detection_boxes'], [0])
        detection_masks = tf.squeeze(tensor_dict['detection_masks'], [0])
        # Reframe is required to translate mask from box coordinates to image coordinates and fit the image size.
        real_num_detection = tf.cast(tensor_dict['num_detections'][0], tf.int32)
        detection_boxes = tf.slice(detection_boxes, [0, 0], [real_num_detection, -1])
        detection_masks = tf.slice(detection_masks, [0, 0, 0], [real_num_detection, -1, -1])
        detection_masks_reframed = utils_ops.reframe_box_masks_to_image_masks(
            detection_masks, detection_boxes, image.shape[0], image.shape[1])
        detection_masks_reframed = tf.cast(
            tf.greater(detection_masks_reframed, 0.5), tf.uint8)
        # Follow the convention by adding back the batch dimension
        tensor_dict['detection_masks'] = tf.expand_dims(
            detection_masks_reframed, 0)
      image_tensor = detection_graph.get_tensor_by_name('image_tensor:0')

      # Run inference
      t1=time.time()
      output_dict = session.run(tensor_dict,
                             feed_dict={image_tensor: np.expand_dims(image, 0)})
      t2=time.time()
      print("runtime")
      print(t2-t1)

      # all outputs are float32 numpy arrays, so convert types as appropriate
      classes= output_dict['detection_classes'][0]
      scores=output_dict['detection_scores'][0]
      #print(output_dict['detection_classes'])
      #print(output_dict['detection_scores'])
      output_classes = []
      output_coord = []
      for i in list(range(len(classes))):
        if scores[i]>0.5:
            output_classes.append(category_index[classes[i]]['name'])
            output_coord.append(output_dict['detection_boxes'][0][i])

      return output_coord, output_classes



image = Image.open(".jpg")
output_coord, output_classes = run_inference_for_single_image(image)

